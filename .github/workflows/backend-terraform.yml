name: Terraform Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
        default: "dev"
      aws_region:
        description: 'AWS region to deploy to'
        required: true
        type: string
        default: "eu-north-1"
      instance_type:
        description: 'EC2 instance type'
        required: true
        type: string
        default: "t3.micro"
      existing_vpc_id:
        description: 'ID of an existing VPC to use'
        required: false
        type: string
        default: ""
      existing_subnet_id:
        description: 'ID of an existing subnet to use'
        required: false
        type: string
        default: ""
    outputs:
      instance_ip:
        description: "The public IP of the created EC2 instance"
        value: ${{ jobs.terraform.outputs.instance_ip }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write  # Required for requesting the JWT
      contents: read   # Required for actions/checkout
    env:
      AWS_REGION: ${{ inputs.aws_region }}
      ENVIRONMENT: ${{ inputs.environment }}
      TF_VAR_environment: ${{ inputs.environment }}
      TF_VAR_instance_type: ${{ inputs.instance_type }}
      TF_VAR_existing_vpc_id: ${{ inputs.existing_vpc_id }}
      TF_VAR_existing_subnet_id: ${{ inputs.existing_subnet_id }}
      TF_STATE_BUCKET: "project-vista-terraform-state"
      TF_STATE_LOCK_TABLE: "project-vista-terraform-lock"
      # Reduce AWS SDK logging verbosity
      AWS_STS_REGIONAL_ENDPOINTS: regional
      AWS_RETRY_MODE: standard
      AWS_METADATA_SERVICE_TIMEOUT: 2
      AWS_METADATA_SERVICE_NUM_ATTEMPTS: 2
      AWS_SDK_LOAD_CONFIG: 1
      AWS_EC2_METADATA_DISABLED: true
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Create Terraform State Bucket and Lock Table
        run: |
          # Check if S3 bucket exists, create if it doesn't
          if ! aws s3api head-bucket --bucket ${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
            echo "Creating S3 bucket for Terraform state..."
            aws s3api create-bucket \
              --bucket ${{ env.TF_STATE_BUCKET }} \
              --region ${{ env.AWS_REGION }} \
              --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}

            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket ${{ env.TF_STATE_BUCKET }} \
              --versioning-configuration Status=Enabled

            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket ${{ env.TF_STATE_BUCKET }} \
              --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "Terraform state bucket already exists"
          fi

          # Check if DynamoDB table exists, create if it doesn't
          if ! aws dynamodb describe-table --table-name ${{ env.TF_STATE_LOCK_TABLE }} 2>/dev/null; then
            echo "Creating DynamoDB table for Terraform state locking..."
            aws dynamodb create-table \
              --table-name ${{ env.TF_STATE_LOCK_TABLE }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "Terraform state lock table already exists"
          fi

      - name: Terraform Init
        id: init
        run: |
          cd terraform/main-infra
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/main-infra
          terraform plan \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="instance_type=${{ inputs.instance_type }}" \
            -var="existing_vpc_id=${{ inputs.existing_vpc_id }}" \
            -var="existing_subnet_id=${{ inputs.existing_subnet_id }}" \
            -out=tfplan

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform/main-infra
          terraform apply -auto-approve tfplan

      - name: Terraform Output
        id: terraform_output
        run: |
          cd terraform/main-infra
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
