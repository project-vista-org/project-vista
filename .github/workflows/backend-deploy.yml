name: Deploy to EC2

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
        default: "dev"
      aws_region:
        description: 'AWS region to deploy to'
        required: true
        type: string
        default: "eu-north-1"
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
      instance_ip:
        description: 'EC2 instance IP address'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write  # Required for requesting the JWT
      contents: read   # Required for actions/checkout
    env:
      AWS_REGION: ${{ inputs.aws_region }}
      ENVIRONMENT: ${{ inputs.environment }}
      SECRETS_PREFIX: "${{ inputs.environment }}/backend"
      IMAGE_TAG: ${{ inputs.image_tag }}
      INSTANCE_IP: ${{ inputs.instance_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get secrets from AWS Secrets Manager
        id: secrets
        run: |
          echo "Retrieving secrets from AWS Secrets Manager..."

          # Get DATABASE_URL secret
          DATABASE_URL=$(aws secretsmanager get-secret-value \
            --secret-id "${{ env.SECRETS_PREFIX }}" \
            --query 'SecretString' \
            --output text | grep -o '"DATABASE_URL":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$DATABASE_URL" ]; then
            echo "DATABASE_URL not found in AWS Secrets Manager, using GitHub secret as fallback"
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
          else
            echo "DATABASE_URL retrieved from AWS Secrets Manager"
          fi

          # Get SUPABASE_URL secret
          SUPABASE_URL=$(aws secretsmanager get-secret-value \
            --secret-id "${{ env.SECRETS_PREFIX }}" \
            --query 'SecretString' \
            --output text | grep -o '"SUPABASE_URL":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$SUPABASE_URL" ]; then
            echo "SUPABASE_URL not found in AWS Secrets Manager, using GitHub secret as fallback"
            SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          else
            echo "SUPABASE_URL retrieved from AWS Secrets Manager"
          fi

          # Get SUPABASE_SERVICE_ROLE_KEY secret
          SUPABASE_KEY=$(aws secretsmanager get-secret-value \
            --secret-id "${{ env.SECRETS_PREFIX }}" \
            --query 'SecretString' \
            --output text | grep -o '"SUPABASE_SERVICE_ROLE_KEY":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$SUPABASE_KEY" ]; then
            echo "SUPABASE_SERVICE_ROLE_KEY not found in AWS Secrets Manager, using GitHub secret as fallback"
            SUPABASE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          else
            echo "SUPABASE_SERVICE_ROLE_KEY retrieved from AWS Secrets Manager"
          fi

          # Store secrets securely in environment variables
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
          echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV

      - name: Validate instance ID
        id: validate-instance
        run: |
          INSTANCE_ID="${{ vars.EC2_INSTANCE_ID }}"

          # Validate instance ID
          if [ -z "$INSTANCE_ID" ]; then
            echo "::error::EC2_INSTANCE_ID is not set in GitHub variables. Please add this variable with a valid EC2 instance ID."
            exit 1
          fi

          # Check if instance ID is in the correct format (i-xxxxxxxxxxxxxxxxx)
          if [[ ! "$INSTANCE_ID" =~ ^i-[a-zA-Z0-9]{8,17}$ ]]; then
            echo "::error::Invalid EC2 instance ID format: $INSTANCE_ID. Expected format: i-xxxxxxxxxxxxxxxxx"
            exit 1
          fi

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Using EC2 instance: $INSTANCE_ID"

      - name: Deploy to EC2 using SSM
        run: |
          # Use a simpler approach with multiple SSM commands
          INSTANCE_ID="${{ steps.validate-instance.outputs.instance_id }}"
          REGION="${{ env.AWS_REGION }}"

          # Create the docker-compose content
          DOCKER_COMPOSE=$(cat << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ steps.login-ecr.outputs.registry }}/vista-backend-${{ env.ENVIRONMENT }}:${{ env.IMAGE_TAG }}
              ports:
                - "80:8000"
              restart: always
              environment:
                - DATABASE_URL=${{ env.DATABASE_URL }}
                - SUPABASE_URL=${{ env.SUPABASE_URL }}
                - SUPABASE_SERVICE_ROLE_KEY=${{ env.SUPABASE_KEY }}
                - ENVIRONMENT=${{ env.ENVIRONMENT }}
          EOF
          )

          # Step 1: Create directory
          echo "Creating project directory..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["mkdir -p ~/project-vista-app"]}' \
            --output text \
            --region "$REGION"

          # Step 2: Create docker-compose file using base64 encoding (safer than jq)
          echo "Creating docker-compose.yml on instance..."
          # Encode the docker-compose content with base64 for safe transfer (single line, no wrapping)
          ENCODED_CONTENT=$(echo "$DOCKER_COMPOSE" | base64 -w 0)

          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\":[\"echo $ENCODED_CONTENT | base64 -d > ~/project-vista-app/docker-compose.yml\"]}" \
            --output text \
            --region "$REGION"

          # Step 3: Run deployment commands
          echo "Running deployment..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands":[
                "cd ~/project-vista-app",
                "export AWS_REGION='${{ env.AWS_REGION }}'",
                "export ECR_REGISTRY='${{ steps.login-ecr.outputs.registry }}'",
                "aws ecr get-login-password --region '${{ env.AWS_REGION }}' | docker login --username AWS --password-stdin '${{ steps.login-ecr.outputs.registry }}'",
                "docker-compose pull",
                "docker-compose down || true",
                "docker-compose up -d",
                "echo \"Deployment completed successfully\""
              ]
            }' \
            --output text \
            --cloud-watch-output-config CloudWatchOutputEnabled=true \
            --region "$REGION"

          echo "Deployment commands sent to instance $INSTANCE_ID"

      - name: Verify deployment
        run: |
          INSTANCE_ID="${{ steps.validate-instance.outputs.instance_id }}"
          REGION="${{ env.AWS_REGION }}"
          INSTANCE_IP="${{ env.INSTANCE_IP }}"

          # Wait for the container to start with retries
          echo "Waiting for container to start..."
          MAX_RETRIES=10
          RETRY_COUNT=0
          CONTAINER_RUNNING=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$CONTAINER_RUNNING" = false ]; do
            echo "Checking container status (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."

            # Check if any container with vista-backend in the name is running
            CONTAINER_STATUS=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands":["docker ps --format \"{{.Names}} {{.Status}}\" | grep -i vista-backend || echo \"Container not running\""]}' \
              --output text \
              --query "StandardOutputContent" \
              --region "$REGION")

            if [[ "$CONTAINER_STATUS" != *"Container not running"* ]]; then
              CONTAINER_RUNNING=true
              echo "Container is running: $CONTAINER_STATUS"
            else
              echo "Container not running yet, waiting..."
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 10
            fi
          done

          if [ "$CONTAINER_RUNNING" = false ]; then
            echo "::error::Container failed to start after $MAX_RETRIES attempts"

            # Get docker-compose logs for debugging
            aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands":["cd ~/project-vista-app && docker-compose logs"]}' \
              --output text \
              --region "$REGION"

            exit 1
          fi

          # Check container logs to help with debugging
          echo "Checking container logs..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["cd ~/project-vista-app && docker-compose logs backend || echo \"No logs available\""]}' \
            --output text \
            --region "$REGION"

          # Check if the API is responding locally - with command ID capture
          echo "Checking if API is responding locally..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["curl -s http://localhost/api/health"]}' \
            --output text \
            --query "Command.CommandId" \
            --region "$REGION")

          echo "Waiting for health check command to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region "$REGION"

          # Get the command output
          HEALTH_CHECK=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" \
            --output text \
            --region "$REGION")

          echo "Health check response: $HEALTH_CHECK"

          # Verify health check response
          if [[ "$HEALTH_CHECK" == *"healthy"* ]]; then
            echo "API health check successful!"
          else
            echo "API health check didn't return 'healthy' status. This might be expected during initial deployment."
            echo "Will try the root endpoint as fallback..."

            # Try the root endpoint as fallback
            ROOT_COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --parameters '{"commands":["curl -s http://localhost/"]}' \
              --output text \
              --query "Command.CommandId" \
              --region "$REGION")

            aws ssm wait command-executed \
              --command-id "$ROOT_COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --region "$REGION"

            ROOT_CHECK=$(aws ssm get-command-invocation \
              --command-id "$ROOT_COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" \
              --output text \
              --region "$REGION")

            echo "Root endpoint response: $ROOT_CHECK"

            if [[ "$ROOT_CHECK" == *"running"* ]]; then
              echo "Root endpoint check successful!"
            else
              echo "Warning: API may not be fully initialized yet."
            fi
          fi

          # Also verify external access if INSTANCE_IP is provided
          if [ -n "$INSTANCE_IP" ]; then
            echo "Verifying external access via $INSTANCE_IP..."
            EXTERNAL_RESPONSE=$(curl -m 10 -s http://$INSTANCE_IP/api/health)
            echo "External health check response: $EXTERNAL_RESPONSE"

            if [[ "$EXTERNAL_RESPONSE" == *"healthy"* ]]; then
              echo "External API health check successful!"
            else
              echo "External API health check didn't return 'healthy' status."
              echo "This might be due to network configuration or the API still initializing."
            fi
          fi

          # Accept deployment as successful since the container is running
          echo "Container is running. Deployment verification completed successfully."
